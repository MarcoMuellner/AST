#!/home/marco/bin/AST/venv/bin/python

import numpy as np
import matplotlib.pyplot as pl
from os import path
import argparse
from scipy.integrate import simps
from astropy.stats import LombScargle

def window_function(df,nyq,ls,width = None, oversampling = 10):
    if width is None:
        width = 100 * df

    freq_cen = 0.5 * nyq
    Nfreq = int(oversampling * width /df)
    freq = freq_cen + (df / oversampling) * np.arange(-Nfreq, Nfreq, 1)

    x = 0.5 * np.sin(2 * np.pi * freq_cen * ls.t) + 0.5 * np.cos(2 * np.pi * freq_cen * ls.t)

    # Calculate power spectrum for the given frequency range:
    ls = LombScargle(ls.t, x, center_data=True)
    power = ls.power(freq, method='fast', normalization='psd', assume_regular_frequency=True)
    power /= power[int(len(power) / 2)]  # Normalize to have maximum of one

    freq -= freq_cen
    freq *= 1e6
    return freq, power

def fundamental_spacing_integral(df,nyq,ls):
    freq, window = window_function(df,nyq,ls,width=100*df, oversampling=5)
    df = simps(window, freq)
    return df*1e-6

def calculate_psd(data: np.ndarray) -> np.ndarray:
    """
    Computes a given periodogram from the lightcurve
    :param data: Lightcurve dataset
    :return: Periodogram from the dataset
    """
    indx = np.isfinite(data[1])
    df = 1 / (86400 * (np.amax(data[0][indx]) - np.amin(data[0][indx])))  # Hz
    ls = LombScargle(data[0][indx] * 86400, data[1][indx], center_data=True)
    nyq = 1/(2*86400*np.median(np.diff(data[0][indx])))

    df = fundamental_spacing_integral(df,nyq,ls)

    freq = np.arange(df ,nyq, df)
    power = ls.power(freq, normalization='psd', method='fast', assume_regular_frequency=True)

    N = len(ls.t)
    tot_MS = np.sum((ls.y - np.mean(ls.y)) ** 2) / N
    tot_lomb = np.sum(power)
    normfactor = tot_MS / tot_lomb
    freq *=10**6
    power *= normfactor/(df*10**6)

    return np.array((freq,power))

def calculateAmplitudeSpectrum(data: np.ndarray) -> np.ndarray:
    """
    This function computes a periodogram using the LombScargle algorithm. There are different implementations available
    and we leave it up to astropy to decide which one should be applied
    :param data: Temporal dataset, an observation by some kind instrument. First axis time, second axis flux
    :param frequencyBoundary: Boundary that should be considered when computing the spectrum
    :return: 2-D Array, containing frequency (first array) and amplitude (second array)
    """
    # create object
    ls = LombScargle(data[0], data[1], normalization='psd')

    # if defined max frequency is bigger than the nyquist frequency, cutoff at nyquist
    indx = np.isfinite(data[1])
    nFrequency = 1 / (2 * np.median(np.diff(data[0][indx])))

    # compute Spectrum
    f, p = ls.autopower(minimum_frequency=0, maximum_frequency=nFrequency, samples_per_peak=100)

    # normalization of psd in order to get good amplitudes
    p = np.sqrt(4 / len(data[0])) * np.sqrt(p)

    # removing first item
    p = p[1:]
    f = f[1:]
    return np.array((f, p))

pl.rc('font', family='serif')
pl.rc('xtick', labelsize='x-small')
pl.rc('ytick', labelsize='x-small')

parser = argparse.ArgumentParser(description="")
parser.add_argument('file',type=str,help="Filename")
parser.add_argument('-p','--psd',action='store_true')

args = parser.parse_args()

if not path.isfile(args.file):
    raise IOError(f"File {args.file} does not exist!")

if len(args.file.split(".")) > 1 and args.file.split(".")[1]  == 'npy':
    data = np.load(args.file)
else:
    data = np.loadtxt(args.file)

if data.shape[0] > data.shape[1]:
    data = data.T

if not args.psd:
    f_data = calculateAmplitudeSpectrum(data)
else:
    f_data = calculate_psd(data)

pl.figure(figsize=(14,10))
pl.plot(f_data[0],f_data[1],linewidth=1,color='k')
if not args.psd:
    pl.xscale('linear')
    pl.yscale('linear')
else:
    pl.xscale('log')
    pl.yscale('log')
pl.title(args.file)
pl.tight_layout()
try:
    pl.draw()
    pl.pause(1)
    pl.waitforbuttonpress()
    pl.close()
except:
    pass